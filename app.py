from flask import Flask, render_template, request, redirect, url_for, send_file
from flask_login import LoginManager, login_user, login_required, logout_user, current_user
from config import Config
from models import db, Product, Category, Subcategory, Customer, Order, OrderItem, Admin
from admin_crud import admin_bp
import pandas as pd
from io import BytesIO
from flask import jsonify, flash, render_template, flash, redirect, url_for, abort
from utils import generate_order_pdf

app = Flask(__name__)
app.config.from_object(Config)
db.init_app(app)
app.register_blueprint(admin_bp)



# Flask-Login setup
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = "login"

@login_manager.user_loader
def load_user(admin_id):
    return Admin.query.get(int(admin_id))

# –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
@app.route("/")
def index():
    q = request.args.get("q")
    category_id = request.args.get("category")
    subcategory_id = request.args.get("subcategory")

    query = Product.query.join(Subcategory)

    if q:
        query = query.filter(Product.name.ilike(f"%{q}%"))

    if category_id:
        query = query.filter(Subcategory.category_id == category_id)

    if subcategory_id:
        query = query.filter(Product.subcategory_id == subcategory_id)

    products = query.all()
    categories = Category.query.all()
    subcategories = Subcategory.query.all()

    return render_template(
        "index.html",
        products=products,
        categories=categories,
        subcategories=subcategories
    )


# –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
@app.route("/product/<int:product_id>", methods=["GET", "POST"])
def product_page(product_id):
    product = Product.query.get_or_404(product_id)
    if request.method == "POST":
        name = request.form["name"]
        phone = request.form["phone"]
        quantity = int(request.form["quantity"])
        email = request.form["email"]
        address = request.form["address"]

        customer = Customer.query.filter_by(name=name, phone=phone).first()
        if not customer:
            customer = Customer(name=name, phone=phone, email=email, address=address)
            db.session.add(customer)
            db.session.commit()

        order = Order(customer_id=customer.id)
        db.session.add(order)
        db.session.commit()

        item = OrderItem(order_id=order.id, product_id=product.id, quantity=quantity, unit_price=product.price)
        db.session.add(item)
        order.total = quantity * product.price
        db.session.commit()

        # –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –ë–î
        return redirect(url_for('order_summary', order_id=order.id))
    return render_template("product.html", product=product)

@app.route("/order/<int:order_id>/summary")
def order_summary(order_id):
    order = Order.query.get_or_404(order_id)
    return render_template("order_summary.html", order=order)

# –ü–µ—Ä–µ–≥–ª—è–¥ –∑–∞–º–æ–≤–ª–µ–Ω—å
@app.route("/orders")
def orders():
    status = request.args.get("status")
    query = Order.query.order_by(Order.date.desc())

    if status:
        query = query.filter(Order.status == status)

    all_orders = query.all()
    return render_template("orders.html", orders=all_orders)



# –ï–∫—Å–ø–æ—Ä—Ç —É Excel
@app.route("/export_orders")
def export_orders():
    orders = Order.query.all()
    rows = []
    for order in orders:
        for item in order.items:
            rows.append({
                "–ö–ª—ñ—î–Ω—Ç": order.customer.name,
                "–¢–µ–ª–µ—Ñ–æ–Ω": order.customer.phone,
                "–î–∞—Ç–∞": order.date.strftime("%Y-%m-%d %H:%M"),
                "–¢–æ–≤–∞—Ä": item.product.name,
                "–ö—ñ–ª—å–∫—ñ—Å—Ç—å": item.quantity,
                "–¶—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é": item.unit_price,
                "–°—É–º–∞": item.quantity * item.unit_price,
                "–°—Ç–∞—Ç—É—Å": order.status
            })
    df = pd.DataFrame(rows)
    output = BytesIO()
    df.to_excel(output, index=False)
    output.seek(0)
    return send_file(output, download_name="orders_export.xlsx", as_attachment=True)


@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        username = request.form["username"].strip()
        password = request.form["password"].strip()

        print("üü° –í–≤–µ–¥–µ–Ω–æ:", username, password)

        admin = Admin.query.filter_by(username=username).first()
        print("üü¢ –ó–Ω–∞–π–¥–µ–Ω–æ:", admin.username if admin else None, admin.password if admin else None)

        if admin and admin.password == password:
            print("‚úÖ –ü–∞—Ä–æ–ª—å –∑–±—ñ–≥—Å—è ‚Äî –≤—Ö–æ–¥–∏–º–æ")
            login_user(admin, remember=True)
            print("üîí –ü–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:", current_user.is_authenticated, current_user.username)
            next_page = request.args.get("next")
            return redirect(next_page or url_for("admin_bp.admin_dashboard"))
        
        print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å")
        flash("–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å", "danger")
        return redirect(url_for("login"))

    return render_template("login.html")

@app.route("/check_session")
@login_required
def check_session():
    return f"üë§ –í–∏ —É–≤—ñ–π—à–ª–∏ —è–∫: {current_user.username}"

@app.route("/orders/mark/<int:order_id>/<status>")
def mark_order(order_id, status):
    order = Order.query.get_or_404(order_id)

    if order.status != "–Ω–æ–≤–µ":
        flash(f"‚ö†Ô∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id} –≤–∂–µ –º–∞—î —Å—Ç–∞—Ç—É—Å: {order.status}", "warning")
        return redirect(url_for("orders"))

    if status not in ["–æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ", "–≤—ñ–¥–º–æ–≤–∞"]:
        abort(400)

    order.status = status
    db.session.commit()
    flash(f"üìù –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {status}", "info")
    return redirect(url_for("orders"))

@app.route("/order/<int:order_id>/preview")
def preview_order_pdf(order_id):
    order = Order.query.get_or_404(order_id)
    pdf = generate_order_pdf(order)
    return send_file(pdf, mimetype="application/pdf")

@app.route("/order/<int:order_id>/pdf")
def download_order_pdf(order_id):
    order = Order.query.get_or_404(order_id)
    pdf = generate_order_pdf(order)
    return send_file(pdf, as_attachment=True, download_name=f"order_{order.id}.pdf", mimetype="application/pdf")

with app.app_context():
    db.create_all()
    
    if not Admin.query.first():
        admin = Admin(username="admin", password="admin123")
        db.session.add(admin)
        db.session.commit()
        print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: admin/admin123")

    
    if not Category.query.first():
        categories_with_subs = {
            "–ö–æ–º–ø º—é—Ç–µ—Ä–∏ —Ç–∞ –Ω–æ—É—Ç–±—É–∫–∏": ["–ù–æ—É—Ç–±—É–∫–∏", "–°–∏—Å—Ç–µ–º–Ω—ñ –±–ª–æ–∫–∏", "–ú–æ–Ω–æ–±–ª–æ–∫–∏", "–ù–µ—Ç–±—É–∫–∏"],
            "–ü–µ—Ä–∏—Ñ–µ—Ä—ñ—è": ["–ú–∏—à—ñ", "–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏", "–ö–æ–º–ø–ª–µ–∫—Ç–∏", "–ö–∏–ª–∏–º–∫–∏", "–ì–µ–π–º–ø–∞–¥–∏", "–í–µ–±-–∫–∞–º–µ—Ä–∏", "–ì–∞—Ä–Ω—ñ—Ç—É—Ä–∏"],
            "–ù–∞–∫–æ–ø–∏—á—É–≤–∞—á—ñ": ["–§–ª–µ—à–∫–∏", "HDD", "SSD", "–ö–∞—Ä—Ç–∏ –ø–∞–º º—è—Ç—ñ", "DVD-–¥–∏—Å–∫–∏"],
            "–ú–µ—Ä–µ–∂–µ–≤–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è": ["Wi-Fi —Ä–æ—É—Ç–µ—Ä–∏", "–ö–æ–º—É—Ç–∞—Ç–æ—Ä–∏", "–ö–∞—Ä—Ç–∏", "–ö–∞–±–µ–ª—ñ", "Bluetooth"],
            "–î—Ä—É–∫ —ñ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è": ["–ü—Ä–∏–Ω—Ç–µ—Ä–∏", "–ú–§–£", "–°–∫–∞–Ω–µ—Ä–∏", "–õ–∞–º—ñ–Ω–∞ÃÅ—Ç–æ—Ä–∏", "–®—Ä–µ–¥–µ—Ä–∏"],
            "–û—Ñ—ñ—Å–Ω—ñ –º–µ–±–ª—ñ": ["–ö—Ä—ñ—Å–ª–∞", "–°—Ç—ñ–π–∫–∏", "–ö—Ä—ñ–ø–ª–µ–Ω–Ω—è", "–ó–∞—Å–æ–±–∏ –¥–ª—è —á–∏—â–µ–Ω–Ω—è"],
            "–ê–∫—Å–µ—Å—É–∞—Ä–∏": ["–°—É–º–∫–∏", "–û—Ö–æ–ª–æ–¥–∂—É–≤–∞—á—ñ", "–•–∞–±–∏", "–ê–¥–∞–ø—Ç–µ—Ä–∏", "–ë–ª–æ–∫–∏ –∂–∏–≤–ª–µ–Ω–Ω—è", "–ê–∫—É–º—É–ª—è—Ç–æ—Ä–∏"],
            "–ü–ó": ["–û–°", "–û—Ñ—ñ—Å–Ω—ñ –ø–∞–∫–µ—Ç–∏", "–ê–Ω—Ç–∏–≤—ñ—Ä—É—Å–∏", "–ü–ó –¥–ª—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä—ñ—ó", "–ù–∞–≤—á–∞–ª—å–Ω—ñ"],
            "–Ü–Ω—à–µ": ["–ü–æ–¥–æ–≤–∂—É–≤–∞—á—ñ", "–ó–∞—Ö–∏—Å–Ω—ñ –µ–∫—Ä–∞–Ω–∏", "–Ü–Ω—à–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è"]
        }

        for cat_name, sub_list in categories_with_subs.items():
            cat = Category(name=cat_name)
            db.session.add(cat)
            db.session.flush()

            for sub in sub_list:
                db.session.add(Subcategory(name=sub, category_id=cat.id))

        db.session.commit()
        print("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ–¥–∞–Ω–æ.")

    if not Product.query.first():
        demo_products = {
            "–ù–æ—É—Ç–±—É–∫–∏": [
                ("Lenovo IdeaPad 3", 23500, 10, "lenovo.png"),
                ("HP Pavilion", 27500, 5, "hp.png")
            ],
            "–ú–∏—à—ñ": [
                ("Logitech M185", 550, 30, "logitech.png")
            ]
        }

        subcategories = Subcategory.query.all()
        for sub in subcategories:
            if sub.name in demo_products:
                for name, price, stock, img in demo_products[sub.name]:
                    db.session.add(Product(
                        name=name,
                        price=price,
                        stock=stock,
                        description=f"–¢–æ–≤–∞—Ä –∑ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {sub.name}",
                        image_url=img,
                        subcategory_id=sub.id
                    ))
        db.session.commit()
        print("‚úÖ –¢–æ–≤–∞—Ä–∏ –¥–æ–¥–∞–Ω–æ.")

@app.route("/get_subcategories/<int:category_id>")
def get_subcategories(category_id):
    subcategories = Subcategory.query.filter_by(category_id=category_id).all()
    data = [{"id": sub.id, "name": sub.name} for sub in subcategories]
    return jsonify(data)

if __name__ == "__main__":
    app.run(debug=True)

